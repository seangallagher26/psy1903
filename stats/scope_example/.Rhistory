# (5): Variance homogeneity (homoscedasticity)
# We can still use the leveneTest() function, as we did with one-way ANOVA,
# but now we need to adjust the arguments slightly: We add the interaction argument
leveneTest(implicit_bias$D_Score, interaction(implicit_bias$Ideology_releveled, implicit_bias$Condition))
## Which cell might be causing this effect? Why?
boxplot(implicit_bias$D_Score ~  implicit_bias$Condition*implicit_bias$Ideology_releveled, main = "D_score by Condition")
table(implicit_bias$Ideology_releveled, implicit_bias$Condition) # we don't have that many people in each group...
## For one-way ANOVA we used the aov() function
D_score_ANOVA <- aov(D_Score ~ Condition*Ideology_releveled, data = implicit_bias)
summary(D_score_ANOVA)
## BUT recall -- was the design balanced?
table(implicit_bias$Condition, implicit_bias$Ideology_releveled) ## No!
## SO -- we get different results than from above if we flip Condition and Ideology
D_score_ANOVA2 <- aov(D_Score ~ Ideology_releveled*Condition, data = implicit_bias)
## SO -- we get different results than from above if we flip Condition and Ideology
D_score_ANOVA2 <- aov(D_Score ~ Ideology_releveled*Condition, data = implicit_bias)
summary(D_score_ANOVA2) ## we need to address this!
ANOVA_adj <- Anova(D_score_ANOVA, type = "II", white.adjust = TRUE)
ANOVA_adj
# (4) IV is Normally distributed within each group: using the residuals to evaluate this assumption
stres <- rstandard(D_score_ANOVA)    ## extract standardized residuals
# Histogram & Q-Q plot
op <- par(mfrow = c(1,2))
# Histogram & Q-Q plot
op <- par(mfrow = c(1,2))
hist(stres, xlab = "Standardized Residuals", main = "Histogram Standardized Residuals")
qqnorm(stres)
qqline(stres)
par(op)
# Normality test on residuals
shapiro.test(stres)
ks.test(stres, "pnorm")
ANOVA_adj ## remember we had to adjust due to the unbalanced design.
interaction.plot(implicit_bias$Condition, implicit_bias$Ideology_releveled, implicit_bias$D_Score, ylab = "D_Score (anti-old bias)",
xlab = "Condition", type = "b", pch = 19, lty = 1, legend = FALSE, col = rainbow(5)[1:3])
legend("bottomleft", legend = c("Neutral", "Liberal", "Conservative"), lty = 1, col = rainbow(5)[1:3], cex = 0.6)
interaction.plot(implicit_bias$Condition, implicit_bias$Ideology_releveled, implicit_bias$D_Score, ylab = "D_Score (anti-old bias)",
xlab = "Condition", type = "b", pch = 19, lty = 1, legend = FALSE, col = rainbow(5)[1:3])
legend("bottomleft", legend = c("Neutral", "Liberal", "Conservative"), lty = 1, col = rainbow(5)[1:3], cex = 0.6)
## Plots of the main effects:
op <- par(mfrow = c(1,2))
boxplot(implicit_bias$D_Score ~  implicit_bias$Condition, main = "D_score by Condition")
boxplot(implicit_bias$D_Score ~  implicit_bias$Ideology_releveled, main = "D_score by Ideology")
par(op)
## reminder of all possible pairings:
boxplot(implicit_bias$D_Score ~  implicit_bias$Condition*implicit_bias$Ideology_releveled, main = "D_score by Condition")
par(op)
## reminder of all possible pairings:
boxplot(implicit_bias$D_Score ~  implicit_bias$Condition*implicit_bias$Ideology_releveled, main = "D_score by Condition")
# Pairwise comparisons:
TukeyHSD(D_score_ANOVA)   ## All pairwise post-hoc tests
## interaction plot involving the medians (!), and not the means.
op <- par(mfrow = c(1,2))
interaction.plot( implicit_bias$Condition,implicit_bias$Ideology_releveled, implicit_bias$D_Score,
fun = median, ylab = "Median D_score", type = "b", pch = 19,
lty = 1, col = 1:3, main = "Interaction Plot", legend = FALSE, xlab = "Condition")
legend("bottomleft", legend = c("Neurtal", "Liberal","Conservative"), col = 1:3, lty = 1, cex = 0.8)
interaction.plot(implicit_bias$Ideology_releveled, implicit_bias$Condition, implicit_bias$D_Score,
fun = median, ylab = "Median D_score", type = "b", pch = 19,
lty = 1, col = 1:2, main = "Interaction Plot", legend = FALSE, xlab = "Ideology")
legend("bottomleft", legend = c("Control", "Pairings"), col = 1:2, lty = 1, cex = 0.8)
par(op)
## Note: no need to worry about unbalanced designs in the non-parametric version
np_2way_aov <- med2way(D_Score ~ Condition*Ideology_releveled, data = implicit_bias)
np_2way_aov
## Non-parametric post-hoc tests:
mcp2a(D_Score ~ Condition*Ideology_releveled, data = implicit_bias)
# (1) Load the data into a new object called "myIAT"
# URL: https://mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv
# No need to specify the "header" or "sep" arguments.
myIAT <- read.csv(https://mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv)
# (1) Load the data into a new object called "myIAT"
# URL: https://mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv
# No need to specify the "header" or "sep" arguments.
myIAT <- read.csv(https:/mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv)
# (1) Load the data into a new object called "myIAT"
# URL: https://mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv
# No need to specify the "header" or "sep" arguments.
myIAT <- read.csv(mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv)
# (1) Load the data into a new object called "myIAT"
# URL: https://mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv
# No need to specify the "header" or "sep" arguments.
myIAT <- read.csv(https://mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv)
# First, let's load the packages.
if (!require(car)) {install.packages("car"); require(car)} # for Anova() function
if (!require(WRS2)) {install.packages("WRS2"); require(WRS2)} #
# (1) Load the data into a new object called "myIAT"
# URL: https://mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv
# No need to specify the "header" or "sep" arguments.
myIAT <- read.csv("https://mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv")
# (1) Load the data into a new object called "myIAT"
# URL: https://mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv
# No need to specify the "header" or "sep" arguments.
myIAT <- read.csv("https://mair.sites.fas.harvard.edu/datasets/raceideolIAT.csv")
View(myIAT)
table(myIAT$ideol, myIAT$race)
by(myIAT$D, list(myIAT$ideol, myIAT$racd), mean)
by(myIAT$D, list(myIAT$ideol, myIAT$race), mean)
boxplot(myIAT$D~ myIAT$ideol*myIAT$race)
fitfacaov <- aov(D ~ ideol*race, data = myIAT)
summary(fitfacaov)
summary(fitfacaov)
?ifelse
?mutate
if(!require("fastDummies")) {install.packages("fastDummies"); require("fastDummies")}
?mutate
library("fastDummies")
if(!require("fastDummies")) {install.packages("fastDummies"); require("fastDummies")}
?mutate
?mutate
??mutate
if(!require("fastDummies")) {install.packages("fastDummies"); require("fastDummies")}
?dummy_cols
iat_data1 <- read.csv("~/Desktop/psy1903/osfstorage-archive/gender-major-iat-2024-11-05-21-51-39.csv", header = TRUE, sep = ",", na.strings = "NA")
str(iat_data1)
summary(iat_data1)
iat_data2 <- iat_data1[iat_data1$expectedCategoryAsDisplayed == "science or women" |
iat_data1$expectedCategoryAsDisplayed == "liberal arts or men" |
iat_data1$expectedCategoryAsDisplayed == "science or men" |
iat_data1$expectedCategoryAsDisplayed == "liberal arts or women",
c("trial_index", "rt", "response", "word", "expectedCategory", "expectedCategoryAsDisplayed", "leftCategory", "rightCategory", "correct")]
str(iat_data2)
iat_data2$leftCategory <- as.factor(iat_data2$leftCategory)
column_names <- c("expectedCategoryAsDisplayed", "expectedCategory", "leftCategory", "rightCategory")
for(column_name in column_names) {
iat_data2[,column_name] <- as.factor(iat_data2[,column_name])
}
str(iat_data2)
calculate_IAT_dscore <- function() {
# Step 1: Filter out trials <300 & >3000
tmp <- iat_data2[iat_data2$rt > 300 & iat_data2$rt < 3000,]
# Step 2: Separate congruent & incongruent
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or men" |
tmp$expectedCategoryAsDisplayed == "liberal arts or women",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or women" |
tmp$expectedCategoryAsDisplayed == "liberal arts or men",]
# Step 3: calculate mean & stdev
congruent_means <- mean(congruent_trials$rt, na.rm = TRUE)
incongruent_trials <- mean(incongruent_trials$rt, na.rm = TRUE)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
# Step 4: Calculate D-Score
dscore <- (congruent_means - incongruent_trials) / pooled_sd
return(dscore)
}
calculate_IAT_dscore()
## Set a variable called directory_path with the path to the location of your data csv files. This directory should *only* contain your raw participant csv data files and no other files.
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
## Create a list of all the files in that directory.
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
## Create an empty data frame called dScores that has two columns (IAT) or three columns (EST) and as many rows as you have data files (e.g., participants)
## IAT
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
## Rename the default column names to something meaningful
## IAT
colnames(dScores) <- c("participant_ID", "d_score")
## Initiate variable i to represent row numbers for each iteration, starting with 1
i = 1
## Now fill in the remaining code following the commented instructions:
## Initiate a for loop that iterates across each file in files_list
file <- files_list[[1]]
for (file in files_list) {
tmp <- read.csv(file)
participant_ID <- tools::file_path_sans_ext(basename(file))
dScores[i,"participant_ID"] <- participant_ID
dScores[i, "d_scores"] <- calculate_IAT_dscore()
rm(tmp)
i <- i + 1
}
View(dScores)
iat_data1 <- read.csv("~/Desktop/psy1903/osfstorage-archive/gender-major-iat-2024-11-05-21-51-39.csv", header = TRUE, sep = ",", na.strings = "NA")
str(iat_data1)
summary(iat_data1)
iat_data2 <- iat_data1[iat_data1$expectedCategoryAsDisplayed == "science or women" |
iat_data1$expectedCategoryAsDisplayed == "liberal arts or men" |
iat_data1$expectedCategoryAsDisplayed == "science or men" |
iat_data1$expectedCategoryAsDisplayed == "liberal arts or women",
c("trial_index", "rt", "response", "word", "expectedCategory", "expectedCategoryAsDisplayed", "leftCategory", "rightCategory", "correct")]
str(iat_data2)
iat_data2$leftCategory <- as.factor(iat_data2$leftCategory)
column_names <- c("expectedCategoryAsDisplayed", "expectedCategory", "leftCategory", "rightCategory")
for(column_name in column_names) {
iat_data2[,column_name] <- as.factor(iat_data2[,column_name])
}
str(iat_data2)
calculate_IAT_dscore <- function() {
# Step 1: Filter out trials <300 & >3000
tmp <- iat_data2[iat_data2$rt > 300 & iat_data2$rt < 3000,]
# Step 2: Separate congruent & incongruent
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or men" |
tmp$expectedCategoryAsDisplayed == "liberal arts or women",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or women" |
tmp$expectedCategoryAsDisplayed == "liberal arts or men",]
# Step 3: calculate mean & stdev
congruent_means <- mean(congruent_trials$rt, na.rm = TRUE)
incongruent_trials <- mean(incongruent_trials$rt, na.rm = TRUE)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
# Step 4: Calculate D-Score
dscore <- (congruent_means - incongruent_trials) / pooled_sd
return(dscore)
}
calculate_IAT_dscore()
## Set a variable called directory_path with the path to the location of your data csv files. This directory should *only* contain your raw participant csv data files and no other files.
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
## Create a list of all the files in that directory.
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
## Create an empty data frame called dScores that has two columns (IAT) or three columns (EST) and as many rows as you have data files (e.g., participants)
## IAT
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
## Rename the default column names to something meaningful
## IAT
colnames(dScore) <- c("participant_ID",)
View(dScores)
iat_data2 <- iat_data1[iat_data1$expectedCategoryAsDisplayed == "science or women" |
iat_data1$expectedCategoryAsDisplayed == "liberal arts or men" |
iat_data1$expectedCategoryAsDisplayed == "science or men" |
iat_data1$expectedCategoryAsDisplayed == "liberal arts or women",
c("trial_index", "rt", "response", "word", "expectedCategory", "expectedCategoryAsDisplayed", "leftCategory", "rightCategory", "correct")]
str(iat_data2)
iat_data2$leftCategory <- as.factor(iat_data2$leftCategory)
column_names <- c("expectedCategoryAsDisplayed", "expectedCategory", "leftCategory", "rightCategory")
for(column_name in column_names) {
iat_data2[,column_name] <- as.factor(iat_data2[,column_name])
}
str(iat_data2)
calculate_IAT_dscore <- function() {
# Step 1: Filter out trials <300 & >3000
tmp <- iat_data2[iat_data2$rt > 300 & iat_data2$rt < 3000,]
# Step 2: Separate congruent & incongruent
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or men" |
tmp$expectedCategoryAsDisplayed == "liberal arts or women",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or women" |
tmp$expectedCategoryAsDisplayed == "liberal arts or men",]
# Step 3: calculate mean & stdev
congruent_means <- mean(congruent_trials$rt, na.rm = TRUE)
incongruent_trials <- mean(incongruent_trials$rt, na.rm = TRUE)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
# Step 4: Calculate D-Score
dscore <- (congruent_means - incongruent_trials) / pooled_sd
return(dscore)
}
calculate_IAT_dscore()
## Set a variable called directory_path with the path to the location of your data csv files. This directory should *only* contain your raw participant csv data files and no other files.
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
## Create a list of all the files in that directory.
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
## Create an empty data frame called dScores that has two columns (IAT) or three columns (EST) and as many rows as you have data files (e.g., participants)
## IAT
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
## Rename the default column names to something meaningful
## IAT
colnames(dScores) <- c("participant_ID", "d_score")
## Initiate variable i to represent row numbers for each iteration, starting with 1
i = 1
## Now fill in the remaining code following the commented instructions:
## Initiate a for loop that iterates across each file in files_list
file <- files_list[[1]]
for (file in files_list) {
tmp <- read.csv(file)
participant_ID <- tools::file_path_sans_ext(basename(file))
dScores[i,"participant_ID"] <- participant_ID
dScores[i, "d_scores"] <- calculate_IAT_dscore()
rm(tmp)
i <- i + 1
}
View(dScores)
View(dScores)
dScores[i, "d_score"] <- calculate_IAT_dscore()
file <- files_list[[1]]
for (file in files_list) {
tmp <- read.csv(file)
participant_ID <- tools::file_path_sans_ext(basename(file))
dScores[i,"participant_ID"] <- participant_ID
dScores[i, "d_score"] <- calculate_IAT_dscore()
rm(tmp)
i <- i + 1
}
View(dScores)
able called directory_path with the path to the location of your data csv files. This directory should *only* contain your raw participant csv data files and no other files.
View(dScores)
## Set a variable called directory_path with the path to the location of your data csv files. This directory should *only* contain your raw participant csv data files and no other files.
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
## Create a list of all the files in that directory.
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
## Create an empty data frame called dScores that has two columns (IAT) or three columns (EST) and as many rows as you have data files (e.g., participants)
## IAT
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
## Rename the default column names to something meaningful
## IAT
colnames(dScores) <- c("participant_ID", "d_score")
## Initiate variable i to represent row numbers for each iteration, starting with 1
i = 1
## Now fill in the remaining code following the commented instructions:
## Initiate a for loop that iterates across each file in files_list
file <- files_list[[1]]
for (file in files_list) {
tmp <- read.csv(file)
participant_ID <- tools::file_path_sans_ext(basename(file))
dScores[i,"participant_ID"] <- participant_ID
dScores[i, "d_score"] <- calculate_IAT_dscore()
rm(tmp)
i <- i + 1
}
View(dScores)
rm(column_name)
rm(column_names)
iat_data1 <- read.csv("~/Desktop/psy1903/osfstorage-archive/gender-major-iat-2024-11-05-21-51-39.csv", header = TRUE, sep = ",", na.strings = "NA")
iat_data2 <- iat_data1[iat_data1$expectedCategoryAsDisplayed == "science or women" |
iat_data1$expectedCategoryAsDisplayed == "liberal arts or men" |
iat_data1$expectedCategoryAsDisplayed == "science or men" |
iat_data1$expectedCategoryAsDisplayed == "liberal arts or women",
c("trial_index", "rt", "response", "word", "expectedCategory", "expectedCategoryAsDisplayed", "leftCategory", "rightCategory", "correct")]
iat_data2
column_names <- c("expectedCategoryAsDisplayed", "expectedCategory", "leftCategory", "rightCategory")
for(column_name in column_names) {
iat_data2[,column_name] <- as.factor(iat_data2[,column_name])
}
str(iat_data2)
calculate_IAT_dscore <- function() {
# Step 1: Filter out trials <300 & >3000
tmp <- iat_data2[iat_data2$rt > 300 & iat_data2$rt < 3000,]
# Step 2: Separate congruent & incongruent
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or men" |
tmp$expectedCategoryAsDisplayed == "liberal arts or women",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or women" |
tmp$expectedCategoryAsDisplayed == "liberal arts or men",]
# Step 3: calculate mean & stdev
congruent_means <- mean(congruent_trials$rt, na.rm = TRUE)
incongruent_trials <- mean(incongruent_trials$rt, na.rm = TRUE)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
# Step 4: Calculate D-Score
dscore <- (congruent_means - incongruent_trials) / pooled_sd
return(dscore)
}
calculate_IAT_dscore <- function() {
# Step 1: Filter out trials <300 & >3000
tmp <- iat_data2[iat_data2$rt > 300 & iat_data2$rt < 3000,]
# Step 2: Separate congruent & incongruent
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or men" |
tmp$expectedCategoryAsDisplayed == "liberal arts or women",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or women" |
tmp$expectedCategoryAsDisplayed == "liberal arts or men",]
# Step 3: calculate mean & stdev
congruent_means <- mean(congruent_trials$rt, na.rm = TRUE)
incongruent_trials <- mean(incongruent_trials$rt, na.rm = TRUE)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
# Step 4: Calculate D-Score
dscore <- (congruent_means - incongruent_trials) / pooled_sd
return(dscore)
}
## Set a variable called directory_path with the path to the location of your data csv files. This directory should *only* contain your raw participant csv data files and no other files.
directory_path <- "~/Desktop/psy1903/osfstorage-archive"
## Create a list of all the files in that directory.
files_list <- list.files(path = directory_path, pattern = "\\.csv$", full.names = TRUE)
## Create an empty data frame called dScores that has two columns (IAT) or three columns (EST) and as many rows as you have data files (e.g., participants)
## IAT
dScores <- data.frame(matrix(nrow = length(files_list), ncol = 2))
## Rename the default column names to something meaningful
## IAT
colnames(dScores) <- c("participant_ID", "d_score")
## Initiate variable i to represent row numbers for each iteration, starting with 1
i = 1
## Initiate a for loop that iterates across each file in files_list
file <- files_list[[1]]
for (file in files_list) {
tmp <- read.csv(file)
participant_ID <- tools::file_path_sans_ext(basename(file))
dScores[i,"participant_ID"] <- participant_ID
dScores[i, "d_score"] <- calculate_IAT_dscore()
rm(tmp)
i <- i + 1
}
View(dScores)
calculate_IAT_dscore <- function(data) {
# Step 1: Filter out trials <300 & >3000
tmp <- data[data2$rt > 300 & iat_data2$rt < 3000,]
# Step 2: Separate congruent & incongruent
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or men" |
tmp$expectedCategoryAsDisplayed == "liberal arts or women",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or women" |
tmp$expectedCategoryAsDisplayed == "liberal arts or men",]
# Step 3: calculate mean & stdev
congruent_means <- mean(congruent_trials$rt, na.rm = TRUE)
incongruent_trials <- mean(incongruent_trials$rt, na.rm = TRUE)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
# Step 4: Calculate D-Score
dscore <- (congruent_means - incongruent_trials) / pooled_sd
return(dscore)
}
calculate_IAT_dscore()
for (file in files_list) {
tmp <- read.csv(file)
participant_ID <- tools::file_path_sans_ext(basename(file))
dScores[i,"participant_ID"] <- participant_ID
dScores[i, "d_score"] <- calculate_IAT_dscore()
rm(tmp)
i <- i + 1
}
for (file in files_list) {
tmp <- read.csv(file)
participant_ID <- tools::file_path_sans_ext(basename(file))
dScores[i,"participant_ID"] <- participant_ID
dScores[i, "d_score"] <- calculate_IAT_dscore(temp)
rm(tmp)
i <- i + 1
}
for (file in files_list) {
tmp <- read.csv(file)
participant_ID <- tools::file_path_sans_ext(basename(file))
dScores[i,"participant_ID"] <- participant_ID
dScores[i, "d_score"] <- calculate_IAT_dscore(tmp)
rm(tmp)
i <- i + 1
}
calculate_IAT_dscore <- function(data) {
# Step 1: Filter out trials <300 & >3000
tmp <- data[data$rt > 300 & data$rt < 3000,]
# Step 2: Separate congruent & incongruent
congruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or men" |
tmp$expectedCategoryAsDisplayed == "liberal arts or women",]
incongruent_trials <- tmp[tmp$expectedCategoryAsDisplayed == "science or women" |
tmp$expectedCategoryAsDisplayed == "liberal arts or men",]
# Step 3: calculate mean & stdev
congruent_means <- mean(congruent_trials$rt, na.rm = TRUE)
incongruent_trials <- mean(incongruent_trials$rt, na.rm = TRUE)
pooled_sd <- sd(tmp$rt, na.rm = TRUE)
# Step 4: Calculate D-Score
dscore <- (congruent_means - incongruent_trials) / pooled_sd
return(dscore)
}
## Initiate a for loop that iterates across each file in files_list
file <- files_list[[1]]
for (file in files_list) {
tmp <- read.csv(file)
participant_ID <- tools::file_path_sans_ext(basename(file))
dScores[i,"participant_ID"] <- participant_ID
dScores[i, "d_score"] <- calculate_IAT_dscore(tmp)
rm(tmp)
i <- i + 1
}
View(dScores)
## Outside of the for loop, save the new dScores data frame using write.csv() into your data_cleaning/data subdirectory:
write.csv(dScores,"~/Desktop/psy1903/stats/data_cleaning/data/participant_dScores.csv", row.names = FALSE)
#### Scope setup ---------------------------------------------------------------
dir.create("~/Desktop/psy1903/stats/scope_example")
setwd("~/Desktop/psy1903/stats/scope_example")
#### Global vs. Local Variable x -----------------------------------------------
x <- 10          # Global variable x is defined as 10
my_function <- function() {
x <- 20       # Local variable within the function x is defined as 20
print(x)      # This will print 20 (the local variable x)
}
my_function()   # Call the function. This will print 20 (the local variable x)
print(x)        # Outside the function, this will
for(i in 1:3) {
x <- 20  # Local variable x inside the loop
print(x)  # This will print 20, the local x inside the loop
}
print(x)  # Outside the loop, global x will have been overwritten as 20
my_function <- function() {
x * 2
}
my_function() # Produces the error: "Error in my_function() : object 'x' not found" because x is not defined in either global or local environment
rm(x)
my_function() # Uses global variable x, which is assigned the value of 10, and outputs 20. Will cause errors after removing global variable x, or will not update x as expected
## Function with variable x set in global environment
x <- 10
my_function() # Uses global variable x, which is assigned the value of 10, and outputs 20. Will cause errors after removing global variable x, or will not update x as expected
my_function <- function(x) {
x * 2
}
my_function() # Uses global variable x, which is assigned the value of 10, and outputs 20. Will cause errors after removing global variable x, or will not update x as expected
my_function(5) # Passes the value directly via the argument, e.g., `x <- 5` is implicitly coded by placing the 5 in the x position of the function argument, and each call of my_function(x) will produce an updated output of x * 2 as expected
my_function(7)
#### Global vs. Local Variable x -----------------------------------------------
x <- 10          # Global variable x is defined as 10
## Create function to print variable x
my_function <- function() {
x <- 20       # Local variable within the function x is defined as 20
print(x)      # This will print 20 (the local variable x)
}
my_function()   # Call the function. This will print 20 (the local variable x)
## Read in data file to a data frame called iat_test
iat_test <- read.csv("~/Desktop/psy1903/stats/data_cleaning/data/my-iat-test-data.csv")
## Extract questionnaire data
json_data <- iat_test[iat_test$trialType == "Questionnaire", "response"]
## Use fromJSON to Convert from JSON to data frame
questionnaire <- fromJSON(json_data)
## Use fromJSON to Convert from JSON to data frame
questionnaire <- fromJSON(json_data)
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse", "rstudioapi", "lme4", "emmeans", "psych", "corrplot", "jsonlite")
no
if (!require("pacman")) {install.packages("pacman"); require("pacman")}
p_load("tidyverse", "rstudioapi", "lme4", "emmeans", "psych", "corrplot", "jsonlite")
## Use fromJSON to Convert from JSON to data frame
questionnaire <- fromJSON(json_data)
str(questionnaire)
## Convert to numeric
questionnaire <- as.data.frame(lapply(questionnaire, as.numeric))
## Use fromJSON to Convert from JSON to data frame
questionnaire <- fromJSON(json_data)
## Outside of the for loop, save the new dScores data frame using write.csv() into your data_cleaning/data subdirectory:
write.csv(dScores,"~/Desktop/psy1903/stats/data_cleaning/data/participant_dScores.csv", row.names = FALSE)
## Read in data file to a data frame called iat_test
iat_test <- read.csv("~/Desktop/psy1903/stats/data_cleaning/data/my-iat-test-data.csv")
## Read in data file to a data frame called iat_test
iat_test <- read.csv("~/Desktop/psy1903/stats/data_cleaning/data/my-iat-test-data.csv")
## Extract questionnaire data
json_data <- iat_test[iat_test$trialType == "Questionnaire", "response"]
## Use fromJSON to Convert from JSON to data frame
questionnaire <- fromJSON(json_data)
str(questionnaire)
